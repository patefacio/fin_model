//! Enumeration of system unicode characters

////////////////////////////////////////////////////////////////////////////////////
// --- enums ---
////////////////////////////////////////////////////////////////////////////////////
/// Enumeration of unicodes used in the system.
pub enum SystemUnicodes {
    /// Character(üé≤) - Game die
    GameDie,
    /// Character(üè¶) - Bank
    Bank,
    /// Character(üß†) - Brain
    Brain,
    /// Character(üí°) - Light bulb
    LightBulb,
    /// Character(üé≤) - Game die representing single instrument, as opposed to category
    Instrument,
    /// Character(üóÉ) - Card file box
    CardFileBox,
    /// Character(üóÑ) - File cabinet, candidate for account
    FileCabinet,
    /// Character(üåå) - Galaxy, indicating complexity
    Galaxy,
    /// Character(üßÆ) - Abacus, candidate for account
    Abacus,
    /// Character(üìã) - Clipboard, candidate for account
    Clipboard,
    /// Character(üóÑ) - File cabinet, for accounts
    Account,
    /// Character(üìó) - Indicates data came from the dossier (e.g. embedded growth).
    DossierFolderSourced,
    /// Character(‚öôÔ∏è) - Indicates data came from user assumptions.
    UserAssumptionSourced,
    /// Character(XÃÑ) - Indicates value is a sample mean.
    MathSampleMean,
    /// Character(s) - Indicates value is sample standard deviation
    MathSampleStdDev,
    /// Character(Œºg) - Indicates the estimate for geometric mean
    MathGeometricMeanEst,
    /// Character(œÉ) - Indicates value is a standard deviation (e.g. in a normal spec.
    MathSigma,
    /// Character(Œº) - Indicates value is a mean (e.g. in a normal spec).
    MathMu,
    /// Character(œÅ) - Indicates value is a correlation.
    MathRho,
    /// Character(œ±) - The symbol used for measured correlation.
    MathRhoSymbol,
    /// Character(Œµ) - Indicates value is an error term
    MathError,
    /// Character(ùúéùë•,ùë¶) - Indicates covariance
    MathCovariance,
    /// Character(üí∞) - Indicates source from _plusauri_ user.
    PlusauriUser,
    /// Character(üë§) - General user.
    GeneralUser,
    /// Character(üß™) - Indicates source from _test1_ user.
    Test1User,
    /// Character(üíà) - Indicates source from _wealthy_barber_ user.
    WealthyBarberUser,
    /// Character(ü§∑) - Indicates something unknown.
    Unknown,
    /// Character(üëé) - Indicates _gloomy_ outlook.
    OutlookGloomy,
    /// Character(‚õà) - Indicates stormy weather ahead outlook.
    OutlookHoldOnTight,
    /// Character(üëç) - Indicates _bright_ outlook.
    OutlookBright,
    /// Character(üëâ) - Indicates _standard_ outlook.
    OutlookStandard,
    /// Character(üè†) - House - used to indicate generally `Worth` or _Real Estate_.
    House,
    /// Character(üìà) - Stock Chart - used to indicate `Holdings`
    StockChart,
    /// Character(üìà) - Holding, currently stock chart
    Holding,
    /// Character(üö∞) - Water faucet - used to indicate flows.
    Faucet,
    /// Character(‚àû) - Indicates infinity.
    Infinity,
    /// Character(‚û°Ô∏è) - Right arrow block.
    RightArrowBlock,
    /// Character(‚ûú) - Right arrow fat
    RightArrowFat,
    /// Character(‚§ê) - Right arrow fancy long
    RightArrowFancy1,
    /// Character(‚§†) - Right arrow fancy long
    RightArrowFancy2,
    /// Character(‚§ò) - Right arrow fancy long
    RightArrowFancy3,
    /// Character(‚áΩ) - Left arrow open head
    LeftArrowOpenHead,
    /// Character(Ôπ©) - Small dollar sign
    SmallDollar,
    /// Character(‚áö) - Left arrow triple.
    LeftArrowTriple,
    /// Character(‚¨Ö) - Left arrow fat.
    LeftArrowFat,
    /// Character(‚¨Ü) - In flow
    InFlow,
    /// Character(‚¨á) - Out flow
    OutFlow,
    /// Character(ü™¶) - Tombstone
    Tombstone,
    /// Character(üèñ) - Beach Umbrella
    BeachUmbrella,
    /// Character(‚ñº) - Down Triangle
    DownTriangle,
    /// Character(‚ñ≤) - Up Triangle
    UpTriangle,
}

////////////////////////////////////////////////////////////////////////////////////
// --- type impls ---
////////////////////////////////////////////////////////////////////////////////////
impl SystemUnicodes {
    /// Returns the unicode text.
    ///
    ///   * _return_ - The unicode character
    pub fn as_unicode(&self) -> &'static str {
        match self {
            SystemUnicodes::GameDie => "üé≤",
            SystemUnicodes::Bank => "üè¶",
            SystemUnicodes::Brain => "üß†",
            SystemUnicodes::LightBulb => "üí°",
            SystemUnicodes::Instrument => "üé≤",
            SystemUnicodes::CardFileBox => "üóÉ",
            SystemUnicodes::FileCabinet => "üóÑ",
            SystemUnicodes::Galaxy => "üåå",
            SystemUnicodes::Abacus => "üßÆ",
            SystemUnicodes::Clipboard => "üìã",
            SystemUnicodes::Account => "üóÑ",
            SystemUnicodes::DossierFolderSourced => "üìó",
            SystemUnicodes::UserAssumptionSourced => "‚öôÔ∏è",
            SystemUnicodes::MathSampleMean => "XÃÑ",
            SystemUnicodes::MathSampleStdDev => "s",
            SystemUnicodes::MathGeometricMeanEst => "Œºg",
            SystemUnicodes::MathSigma => "œÉ",
            SystemUnicodes::MathMu => "Œº",
            SystemUnicodes::MathRho => "œÅ",
            SystemUnicodes::MathRhoSymbol => "œ±",
            SystemUnicodes::MathError => "Œµ",
            SystemUnicodes::MathCovariance => "ùúéùë•,ùë¶",
            SystemUnicodes::PlusauriUser => "üí∞",
            SystemUnicodes::GeneralUser => "üë§",
            SystemUnicodes::Test1User => "üß™",
            SystemUnicodes::WealthyBarberUser => "üíà",
            SystemUnicodes::Unknown => "ü§∑",
            SystemUnicodes::OutlookGloomy => "üëé",
            SystemUnicodes::OutlookHoldOnTight => "‚õà",
            SystemUnicodes::OutlookBright => "üëç",
            SystemUnicodes::OutlookStandard => "üëâ",
            SystemUnicodes::House => "üè†",
            SystemUnicodes::StockChart => "üìà",
            SystemUnicodes::Holding => "üìà",
            SystemUnicodes::Faucet => "üö∞",
            SystemUnicodes::Infinity => "‚àû",
            SystemUnicodes::RightArrowBlock => "‚û°Ô∏è",
            SystemUnicodes::RightArrowFat => "‚ûú",
            SystemUnicodes::RightArrowFancy1 => "‚§ê",
            SystemUnicodes::RightArrowFancy2 => "‚§†",
            SystemUnicodes::RightArrowFancy3 => "‚§ò",
            SystemUnicodes::LeftArrowOpenHead => "‚áΩ",
            SystemUnicodes::SmallDollar => "Ôπ©",
            SystemUnicodes::LeftArrowTriple => "‚áö",
            SystemUnicodes::LeftArrowFat => "‚¨Ö",
            SystemUnicodes::InFlow => "‚¨Ü",
            SystemUnicodes::OutFlow => "‚¨á",
            SystemUnicodes::Tombstone => "ü™¶",
            SystemUnicodes::BeachUmbrella => "üèñ",
            SystemUnicodes::DownTriangle => "‚ñº",
            SystemUnicodes::UpTriangle => "‚ñ≤",
        }
    }
}

/// Unit tests for `system_unicodes`
#[cfg(test)]
pub mod unit_tests {

    /// Test type SystemUnicodes
    mod test_system_unicodes {
        ////////////////////////////////////////////////////////////////////////////////////
        // --- module uses ---
        ////////////////////////////////////////////////////////////////////////////////////
        use test_log::test;

        ////////////////////////////////////////////////////////////////////////////////////
        // --- functions ---
        ////////////////////////////////////////////////////////////////////////////////////
        #[test]
        fn as_unicode() {
            // Œ± <fn test SystemUnicodes::as_unicode>
            assert_eq!("œÉ", SystemUnicodes::MathSigma.as_unicode());
            assert_eq!("Œº", SystemUnicodes::MathMu.as_unicode());
            assert_eq!("œÅ", SystemUnicodes::MathRho.as_unicode());
            // œâ <fn test SystemUnicodes::as_unicode>
        }

        // Œ± <mod-def test_system_unicodes>
        use super::*;
        // œâ <mod-def test_system_unicodes>
    }

    // Œ± <mod-def unit_tests>
    use super::*;
    // œâ <mod-def unit_tests>
}

// Œ± <mod-def system_unicodes>
// œâ <mod-def system_unicodes>
