/*
  Account types.
*/

syntax = "proto3";

import "core.proto";
import "core_enums.proto";
import "growth.proto";
import "distributions.proto";

package account;

option java_package="plus_modeled";

/*
  Attributes that specify a bond.
*/
message BondSpec {
  /*
    The face value of the bond.
  */
  double face_value = 1;
  
  /*
    Annual bond payment. 
    Quoted as either dollar value or percent of `face_value` based on
    `is_percent_of_face`.
  */
  core.RateCurve annual_coupon = 2;
  
  /*
    Maturity date.
  */
  core.Date maturity = 3;
  
  /*
    If true the values of `annual_coupon` represent percentage of face.
  */
  bool is_percent_of_face = 4;
}

/*
  
  The holding of a given financial asset held in an account with enough relevant
  data to model its growth and dividends in a forecast. The tax nature of the holding
  depends on the account holding it.
  
  `valuation` is the most recent value of the holding on a `Date`.        
*/
message Holding {
  /*
    An optional comment associated with the holding.
  */
  string comment = 1;
  
  /*
    
    Name of the instrument of the holding.
        
    This name becomes an index into a map of growths associated with instruments.
    The details of the instrument growth definitions are held in the `Dossier` and
    referenced here.
  */
  string instrument_name = 2;
  
  /*
    Quantity of holding.
  */
  double quantity = 3;
  
  /*
    Value of holding holding as of date.
  */
  core.YearCurrencyValue unit_valuation = 4;
  
  /*
    Cost basis for holding, assumed in currency of `unit_valuation`.
  */
  double cost_basis = 5;
  
  /*
    Specifies any distributions.
     Distributions may be specified in one of three ways:
     - _DistributionSpec_: Provides breakdown of categorized (e.g. 
     _qualified dividends_, _unqualified dividends_, ...) distribution
     - _BondSpec_: Provides coupon details for a bond.
  */
  oneof distribution_policy {
    /*
      What was done with any distributions.
    */
    distributions.DistributionSpec distribution_spec = 6;
    
    /*
      Bond attributes if holding is a bond
    */
    BondSpec bond_spec = 7;
  };
  
  /*
    Models the sale date of the holding.
  */
  uint64 sale_date = 8;
}

/*
  
  A store of holdings (ie financial assets) with single treatment in terms of gains.
  
  The riskiness of holdings in an account can be specified on the holding directly,
  or for convenience at the account level.
*/
message Account {
  /*
    Name of the account - *Do Not Use Account Numbers*.
  */
  string name = 1;
  
  /*
    Type of account, important for determining tax treatment of gains.
    
    Note: Unlike _Growth Item_ categorization, this is not used to make
    _categorical_ growth assumptions.          
  */
  core_enums.AccountType account_type = 2;
  
  /*
    Defines default growth for any holdings in the account without their own assumption.
    
    This can be used to assign a growth to the account by `growth_item_id`.
    For example, assign `us equity` type growth to the account. 
    If the account has bonds or any holdings with different instruments it is not
    a problem since those can be modeled and will be honored.
  */
  optional growth.ItemGrowth default_item_growth = 3;
  
  /*
    Year associated with `value`.
  */
  repeated Holding holdings = 4;
  
  /*
    Value associated with `year`.
  */
  double value = 5;
  
  /*
    Index into persons in dossier of the owner.
  */
  uint32 owner_index = 6;
}

/*
  Details of _required minimum distribution_.
*/
message RequiredMinimumDistribution {
  /*
    Penalty for *not* withdrawing enough.
  */
  double penalty = 1;
  
  /*
    Determines minimum distribution.
  */
  double distribution_divisor = 2;
}

/*
  Defines how holdings in the account are treated; updated annually
*/
message AccountTreatment {
  /*
    Used to determine sales treatment.
  */
  core_enums.AccountType account_type = 1;
  
  /*
    `withdrawal_treatment` supports _one_of_:
    - EarlyWithdrawalPenalty
    - CollegeIrs529Penalty
    - HealthSavingsPenalty
    - RequiredMinimumDistribution
  */
  oneof withdrawal_treatment {
    /*
      Penalty for early withdrawal.
    */
    double early_withdrawal_penalty = 2;
    
    /*
      Penalty for not using funds for education.
    */
    double college_irs529_penalty = 3;
    
    /*
      Penalty for not using funds for health.
    */
    double health_savings_penalty = 4;
    
    /*
      Penalty and divisor for _required minimum distribution_.
    */
    RequiredMinimumDistribution required_minimum_distribution = 5;
  };
}